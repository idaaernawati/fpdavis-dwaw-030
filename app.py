import streamlit as st
import mysql.connector
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Database connection function
def create_connection():
    try:
        conn = mysql.connector.connect(
            host="kubela.id",
            user="davis2024irwan",
            password="wh451n9m@ch1n3", 
            port="3306",
            database="aw"
        )
        return conn
    except mysql.connector.Error as err:
        st.error(f"Error: {err}")
        return None

# Execute query and return DataFrame
def execute_query(query):
    conn = create_connection()
    if conn is None:
        return pd.DataFrame()
    try:
        cursor = conn.cursor()
        cursor.execute(query)
        columns = [col[0] for col in cursor.description]
        data = cursor.fetchall()
        cursor.close()
        conn.close()
        return pd.DataFrame(data, columns=columns)
    except mysql.connector.Error as err:
        st.error(f"Error: {err}")
        return pd.DataFrame()

# Sidebar navigation
st.sidebar.title("Navigation")
option = st.sidebar.selectbox(
    'Select Analysis Aspect',
    ('Comparison', 'Relationship', 'Composition', 'Distribution')
)

# Main application
st.title("Visualization Dump Data Warehouse Adventure Works")

# Display selected aspect
if option == 'Comparison':
    st.header("Comparison - Bar Chart")
    query_comparison = """
    SELECT
        p.EnglishProductName AS ProductName,
        SUM(s.SalesAmount) AS TotalSales
    FROM
        factinternetsales s
    INNER JOIN
        dimproduct p ON s.ProductKey = p.ProductKey
    GROUP BY
        p.EnglishProductName;
    """
    comparison_data = execute_query(query_comparison)

    if not comparison_data.empty:
        fig1, ax1 = plt.subplots(figsize=(15, 8))
        ax1.bar(comparison_data['ProductName'], comparison_data['TotalSales'], color='skyblue')
        ax1.set_xlabel('Product Name')
        ax1.set_ylabel('Total Sales')
        ax1.set_title('Comparison of Total Sales by Product')
        ax1.set_xticks(range(len(comparison_data['ProductName'])))
        ax1.set_xticklabels(comparison_data['ProductName'], rotation=90)
        ax1.grid(axis='y', linestyle='--', alpha=0.7)
        st.pyplot(fig1)
        st.markdown("""
        **Narrative**: The bar chart above compares the total sales for each product based on Adventure Works database data. Each bar represents a product, with bar height indicating the total sales generated by that product. Sky blue color is used for bars, providing clear contrast with the background. Product names are listed on the x-axis and rotated 90 degrees for readability, while the y-axis shows total sales. The graph title and axis labels provide clear context about the displayed information, and horizontal grid lines assist in estimating sales values for each product more easily.
        """)
    else:
        st.warning("No data to display")

elif option == 'Relationship':
    st.header("Relationship - Scatter Plot")
    query_relationship = """
    SELECT fs.CustomerKey, fs.ProductKey,
           dc.FirstName, dc.LastName,
           dp.EnglishProductName
    FROM factinternetsales fs
    JOIN dimcustomer dc ON fs.CustomerKey = dc.CustomerKey
    JOIN dimproduct dp ON fs.ProductKey = dp.ProductKey
    """
    relationship_data = execute_query(query_relationship)

    if not relationship_data.empty:
        fig2, ax2 = plt.subplots(figsize=(12, 8))
        sns.scatterplot(data=relationship_data, x='CustomerKey', y='ProductKey', hue='EnglishProductName', ax=ax2)
        ax2.set_title('Relationship between Customers and Products')
        ax2.set_xlabel('Customer Key')
        ax2.set_ylabel('Product Key')
        ax2.legend(title='Product', loc='upper right', bbox_to_anchor=(1.25, 1))
        ax2.grid(True)
        st.pyplot(fig2)
        st.markdown("""
        **Narrative**: The scatter plot above shows the relationship between customers and the products they purchase based on data from the Adventure Works database. Each point on the graph represents one transaction, with the x-axis showing CustomerKey and the y-axis showing ProductKey. The color of each point is determined by the purchased product, with a legend on the right side identifying products by color. This graph makes it easy to see purchasing patterns and transaction frequencies
